/// SET ASPECT RATIO for any element
/// @param {Num} $width - element width
/// @param {Num} $height - element height
@mixin aspect-ratio($width, $height) {
	position: relative;
	&:before {
		display: block;
		content: "";
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}
	> .content {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}

@mixin transition-global( $property: all ) {
	transition: $property 0.3s linear; 
}

/// Returns the opposite direction of each direction in a list
/// @author Hugo Giraudel
/// @param {List} $directions - List of initial directions
/// @return {List} - List of opposite directions
@function opposite-direction($directions) {
	$opposite-directions: ();
	$direction-map: (
		'top':    'bottom',
		'right':  'left',
		'bottom': 'top',
		'left':   'right',
		'center': 'center',
		'ltr':    'rtl',
		'rtl':    'ltr'
	);

	@each $direction in $directions {
	  $direction: to-lower-case($direction);
	  
	  @if map-has-key($direction-map, $direction) { 
		$opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
	  } @else {
		@warn "No opposite direction can be found for '#{$direction}'. Direction omitted.";
	  }
	}

	@return $opposite-directions;
}

/// TRIANGLE HELPER MIXIN
/// @param {Direction} $direction - Triangle direction, either 'top', 'right', 'bottom' or 'left'
/// @param {Color} $color [currentcolor] - Triangle color 
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
	@if not index(top right bottom left, $direction) {
	  @error "Direction must be either 'top', 'right', 'bottom' or 'left'.";
	}
  
	width: 0;
	height: 0;
	content: '';
	z-index: 2;
	border-#{opposite-direction($direction)}: ($size * 1) solid $color;
	
	$perpendicular-borders: $size solid transparent;
	
	@if $direction == top or $direction == bottom {
	  border-left:   $perpendicular-borders;
	  border-right:  $perpendicular-borders;
	} @else if $direction == right or $direction == left {
	  border-bottom: $perpendicular-borders;
	  border-top:    $perpendicular-borders;
	}
  }

  @mixin clearfix {
	&::after {
		clear: both;
		content: "";
		display: block;
	}
  }